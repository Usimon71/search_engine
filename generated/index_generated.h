// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INDEX_H_
#define FLATBUFFERS_GENERATED_INDEX_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct DocInfo;
struct DocInfoBuilder;

struct Index;
struct IndexBuilder;

struct DocInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DocInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_WORD_COUNT = 6,
    VT_NAME = 8
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  bool KeyCompareLessThan(const DocInfo * const o) const {
    return id() < o->id();
  }
  int KeyCompareWithValue(uint64_t _id) const {
    return static_cast<int>(id() > _id) - static_cast<int>(id() < _id);
  }
  uint64_t word_count() const {
    return GetField<uint64_t>(VT_WORD_COUNT, 0);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyField<uint64_t>(verifier, VT_WORD_COUNT, 8) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct DocInfoBuilder {
  typedef DocInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(DocInfo::VT_ID, id, 0);
  }
  void add_word_count(uint64_t word_count) {
    fbb_.AddElement<uint64_t>(DocInfo::VT_WORD_COUNT, word_count, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(DocInfo::VT_NAME, name);
  }
  explicit DocInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DocInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DocInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DocInfo> CreateDocInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    uint64_t word_count = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0) {
  DocInfoBuilder builder_(_fbb);
  builder_.add_word_count(word_count);
  builder_.add_id(id);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DocInfo> CreateDocInfoDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    uint64_t word_count = 0,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return CreateDocInfo(
      _fbb,
      id,
      word_count,
      name__);
}

struct Index FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IndexBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WORD_COUNT = 4,
    VT_WORD_AVE = 6,
    VT_DOC_TABLE = 8
  };
  uint64_t word_count() const {
    return GetField<uint64_t>(VT_WORD_COUNT, 0);
  }
  uint64_t word_ave() const {
    return GetField<uint64_t>(VT_WORD_AVE, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<DocInfo>> *doc_table() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<DocInfo>> *>(VT_DOC_TABLE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_WORD_COUNT, 8) &&
           VerifyField<uint64_t>(verifier, VT_WORD_AVE, 8) &&
           VerifyOffset(verifier, VT_DOC_TABLE) &&
           verifier.VerifyVector(doc_table()) &&
           verifier.VerifyVectorOfTables(doc_table()) &&
           verifier.EndTable();
  }
};

struct IndexBuilder {
  typedef Index Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_word_count(uint64_t word_count) {
    fbb_.AddElement<uint64_t>(Index::VT_WORD_COUNT, word_count, 0);
  }
  void add_word_ave(uint64_t word_ave) {
    fbb_.AddElement<uint64_t>(Index::VT_WORD_AVE, word_ave, 0);
  }
  void add_doc_table(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<DocInfo>>> doc_table) {
    fbb_.AddOffset(Index::VT_DOC_TABLE, doc_table);
  }
  explicit IndexBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Index> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Index>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Index> CreateIndex(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t word_count = 0,
    uint64_t word_ave = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<DocInfo>>> doc_table = 0) {
  IndexBuilder builder_(_fbb);
  builder_.add_word_ave(word_ave);
  builder_.add_word_count(word_count);
  builder_.add_doc_table(doc_table);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Index> CreateIndexDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t word_count = 0,
    uint64_t word_ave = 0,
    std::vector<::flatbuffers::Offset<DocInfo>> *doc_table = nullptr) {
  auto doc_table__ = doc_table ? _fbb.CreateVectorOfSortedTables<DocInfo>(doc_table) : 0;
  return CreateIndex(
      _fbb,
      word_count,
      word_ave,
      doc_table__);
}

inline const Index *GetIndex(const void *buf) {
  return ::flatbuffers::GetRoot<Index>(buf);
}

inline const Index *GetSizePrefixedIndex(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Index>(buf);
}

inline bool VerifyIndexBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Index>(nullptr);
}

inline bool VerifySizePrefixedIndexBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Index>(nullptr);
}

inline void FinishIndexBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Index> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedIndexBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Index> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_INDEX_H_
